from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes
from reminder_handler import remind_membership, remind_membership_second # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
from payment_handler import request_payment_receipt  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from approval_handler import handle_approval # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
from reminder_handler import send_followup_message, handle_yes, handle_no # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ reminder_handler

import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

manager_id = 864464357  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("‚úÖ Yes!", callback_data="yes")],
        [InlineKeyboardButton("‚ùå No", callback_data="no")],
        [InlineKeyboardButton("‚ÑπÔ∏è Want to know more...", callback_data="more")],
        [InlineKeyboardButton("üë§ I'm already member", callback_data="already_member")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        # –í—ã–∑–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /start
        await update.message.reply_text(
            "üëã Welcome to the Association for the Professional Development of English Teachers in Kazakhstan!\n"
            "We're glad to have you here.\nDo *YOU* want to become a member of KAZAELT?",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    elif update.callback_query:
        # –í—ã–∑–≤–∞–Ω–æ –∫–Ω–æ–ø–∫–æ–π "Back"
        await update.callback_query.message.edit_text(
            "üëã Welcome to the Association for the Professional Development of English Teachers in Kazakhstan!\n"
            "We're glad to have you here.\nDo *YOU* want to become a member of KAZAELT?",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if query.data == "yes" or query.data == "ready_to_join":
        new_keyboard = [
            [InlineKeyboardButton("üöÄ GO", callback_data="go")],
            [InlineKeyboardButton("‚Ü©Ô∏è Back", callback_data="back")]
        ]
        new_reply_markup = InlineKeyboardMarkup(new_keyboard)
        await query.edit_message_text(
    "üìö **The Association for the Professional Development of English Teachers in Kazakhstan**\n\n"
    "Our mission is to support and empower English teachers across the country by enhancing their skills and knowledge. "
    "We provide engaging **workshops**, **seminars**, and a vibrant network of professionals, all designed to help you grow and succeed in your career.\n\n"
    "üåü *Would you like to join us now?* üåü",
    reply_markup=new_reply_markup
)

    elif query.data == "no":
        await query.edit_message_text("Thank you for your interest! If you change your mind, we are always happy to welcome you into our ranks.")
        context.job_queue.run_once(remind_membership, 10, data=query.message.chat_id)
    elif query.data == "notyet":
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ! –ú—ã –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≤–∞–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.")
        context.job_queue.run_once(remind_membership, 10, data=query.message.chat_id)
    elif query.data == "no_second":
        await query.edit_message_text("–ü–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –≤—ã –µ—â—ë –¥—É–º–∞–µ—Ç–µ! –ú—ã –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≤–∞–º —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥.")
        context.job_queue.run_once(remind_membership_second, 20, data=query.message.chat_id)
    elif query.data == "no_final":
        await query.edit_message_text("Thanks for the reply. We respect your choice and will always be glad to see you in the future!")
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫...
    elif query.data == "more":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–∞—Ö –∏ –∫–Ω–æ–ø–∫–∏ "I've read" –∏ "I'm ready to join"
        info_keyboard = [
            [InlineKeyboardButton("üìñ Not ready yet", callback_data="notyet")],
            [InlineKeyboardButton("üí™ I'm ready to join", callback_data="ready_to_join")]
        ]
        info_reply_markup = InlineKeyboardMarkup(info_keyboard)
        await query.edit_message_text(
            "üåê Please have a look at the links below to know more about the association:\n\n"
            "Website: [kazaelt.kz](https://kazaelt.kz/) - Visit our website for comprehensive information about our activities, events, and resources.\n\n"
            "Annual conference website: [Tap here](https://kazaelt.kz/newconf)\n\n"
            "Social Media:\n- Instagram: [kazaelt](https://www.instagram.com/kazaelt?igsh=enQ4cGt5N3dzODc0)",
            reply_markup=info_reply_markup,
            parse_mode="Markdown"
        )
    elif query.data == "read":
        await query.edit_message_text("Thanks for the introduction!")
    elif query.data == "already_member":
        await query.edit_message_text("You are already a member! Thank you for your support!")
    elif query.data == "back":
        await start(update, context)  # –í–µ—Ä–Ω—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å
    elif query.data == "go":
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
        payment_info = (
            "üí≥ *–û—Ç–ª–∏—á–Ω–æ!* –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫—É—é –ê—Å—Å–æ—Ü–∏–∞—Ü–∏—é —É—á–∏—Ç–µ–ª–µ–π –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n\n"
            "–ú–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–∞–π—Ç–æ–º –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: [KazAELT](https://kazaelt.kz), "
            "–∞ —Ç–∞–∫–∂–µ —Å Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–º [KazAELT Instagram](https://instagram.com/kazaelt?igshid=MzRlODBiNWFlZA==).\n\n"
            "–ü–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –≤ Kaspi. –°—Ç–æ–∏–º–æ—Å—Ç—å —á–ª–µ–Ω—Å—Ç–≤–∞ –∑–∞ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 25,000 —Ç–µ–Ω–≥–µ:\n"
            "[Kaspi](https://kaspi.kz/pay/_gate?action=service_with_subservice&service_id=3025&subservice_id=18043&region_id=19)\n\n"
            "–í –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö –≤—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, ‚Äú–í–µ–±–∏–Ω–∞—Ä‚Äù. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF."
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
        payment_keyboard = [
            [InlineKeyboardButton("üí∞ Pay Now", url='https://kaspi.kz/pay/_gate?action=service_with_subservice&service_id=3025&subservice_id=18043&region_id=19')],
            [InlineKeyboardButton("üì§ I have paid", callback_data='paid')],
            [InlineKeyboardButton("üîô Back", callback_data='back_detailed')]
        ]
        payment_reply_markup = InlineKeyboardMarkup(payment_keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        await query.edit_message_text(
            text=payment_info,
            reply_markup=payment_reply_markup,
            parse_mode="Markdown"
        )
    if query.data == "paid":
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–∞
        await request_payment_receipt(update, context)
    elif query.data == "back_detailed":
    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –æ–ø–∏—Å–∞–Ω–∏—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
        back_keyboard = [
        [InlineKeyboardButton("üöÄ GO", callback_data="go")],
        [InlineKeyboardButton("‚Ü©Ô∏è Back", callback_data="back")]
    ]
    back_reply_markup = InlineKeyboardMarkup(back_keyboard)
    await query.edit_message_text(
        "üìö **The Association for the Professional Development of English Teachers in Kazakhstan**\n\n"
        "Our mission is to support and empower English teachers across the country by enhancing their skills and knowledge. "
        "We provide engaging **workshops**, **seminars**, and a vibrant network of professionals, all designed to help you grow and succeed in your career.\n\n"
        "üåü *Would you like to join us now?* üåü",
        parse_mode="MarkdownV2",
        reply_markup=back_reply_markup  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    )


    if not query or not query.from_user:
        logger.error("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id, query –∏–ª–∏ from_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
    await query.answer()

    chat_id = query.from_user.id
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id: {chat_id}")

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    if query.data.startswith("approve") or query.data.startswith("reject"):
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ handle_approval –¥–ª—è callback_data: {query.data}")
        action, user_id = query.data.split("_")
        user_id = int(user_id)
        await handle_approval(update, context)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ approval_handler

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è "charter_read"
    elif query.data == "charter_read":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google –§–æ—Ä–º—É –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ "Thank you for reading the Charter!"
        await context.bot.send_message(
            chat_id=chat_id,
            text="Please complete this form to continue:\n"

            
                 "https://docs.google.com/forms/d/e/1FAIpQLSdbORRAo-Ahp8T-XEgdnRNJl1R96m4wj1plj-b6og2oxPOU7A/viewform"
        )
        logger.info(f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

        context.job_queue.run_once(send_followup_message, 10, data=chat_id)
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    else:
        logger.info(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {query.data}")
    
    if query.data == "completed_yes":
        await handle_yes(update, context)
    elif query.data == "completed_no":
        await handle_no(update, context)
    else:
        logger.info(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {query.data}")



start_handler = CommandHandler("start", start)
button_handler = CallbackQueryHandler(button)
